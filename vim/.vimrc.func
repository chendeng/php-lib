function! Reversed(l)
    let new_list = deepcopy(a:l)
    call reverse(new_list)
    return new_list
endfunction

function! Add(l, val)
    let new_list = deepcopy(a:l)
    call add(new_list, a:val)
    return new_list
endfunction

function! Assoc(l, i, val)
    let new_list = deepcopy(a:l)
    let new_list[a:i] = a:val
    return new_list
endfunction

function! Remove(l, i)
    let new_list = deepcopy(a:l)
    call remove(new_list, a:i)
    return new_list
endfunction


" function
onoremap <script> <buffer> af :call <SID>CurrentFunction()<cr>
vnoremap <script> <buffer> af :call <SID>CurrentFunction()<cr>

function! s:CurrentFunction()
	if search('\v^(\t|    )\w.*function \w+\([^\)]*\)\_s*\{', 'b') > 0
		"exe 'silent normal' '?\v^(\t|    )\w.*function \w+\([^\)]*\)\_s*\{'."\r"
		exe 'normal' "\<esc>".'V/\v^(\t|    )\}/'."\r"
	endif
endfunction
